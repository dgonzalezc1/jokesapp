{"version":3,"sources":["serviceWorkerRegistration.js","components/Marvel.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Marvel","useState","info","setInfo","online","setOnline","useEffect","onLine","localStorage","getItem","storedData","JSON","parse","fetch","result","json","data","i","max","results","length","push","setItem","stringify","className","map","src","thumbnail","path","extension","alt","name","id","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"wJAYMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,M,yBC3BlDC,MAhEf,WACI,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,qBAA5B,mBAAOG,EAAP,KAAeC,EAAf,KAgCA,OA9BAC,qBAAU,WAGN,IAAIvB,UAAUwB,OACV,GAAkC,OAA/BC,aAAaC,QAAQ,QACpBJ,GAAU,GACVX,QAAQC,IAAI,kBACT,CACH,IAAMe,EAAaC,KAAKC,MAAMJ,aAAaC,QAAQ,SACnDN,EAAQO,GACRL,GAAU,GAIlBQ,MAAM,qIACL3B,MAAK,SAAA4B,GAAM,OAAIA,EAAOC,UACtB7B,MAAK,SAAC4B,GAGH,IADA,IAAME,EAAO,GACJC,EAAI,EAAGC,EAAMJ,EAAOE,KAAKG,QAAQC,OAAQH,EAAIC,EAAKD,GAAK,EAC5DD,EAAKK,KAAKP,EAAOE,KAAKG,QAAQF,IAElCd,EAAQ,GAAD,OAAKa,IACZX,GAAU,GACVG,aAAac,QAAQ,OAAQX,KAAKY,UAAUP,SAIjD,KAES,IAATZ,EAEK,sBAAKoB,UAAU,SAAf,UACI,mDACA,qBAAKA,UAAU,0BAAf,SACCtB,EAAKuB,KAAI,SAAAR,GACN,OACA,sBAAKO,UAAU,OAAf,UACQ,qBAAKA,UAAU,eAAeE,IAAKT,EAAEU,UAAUC,KAAK,mBAAmBX,EAAEU,UAAUE,UAAWC,IAAI,qBAClG,sBAAKN,UAAU,YAAf,UACI,oBAAIA,UAAU,aAAd,SAA4BP,EAAEc,OAC9B,oBAAGP,UAAU,YAAb,wBAAkCP,EAAEe,WAJrBf,EAAEe,YAcrC,sBAAKR,UAAU,SAAf,UACI,mDACA,iD,MCrDhBS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFSnB,SAAkBvD,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIuD,IAAIC,GAAwB/D,OAAOC,SAAS+D,MACpDC,SAAWjE,OAAOC,SAASgE,OAIvC,OAGFjE,OAAOkE,iBAAiB,QAAQ,WAC9B,IAAM7D,EAAK,UAAM0D,GAAN,sBAEPjE,IAgEV,SAAiCO,EAAOC,GAEtC+B,MAAMhC,EAAO,CACX8D,QAAS,CAAE,iBAAkB,YAE5BzD,MAAK,SAAC0D,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjE,UAAUC,cAAciE,MAAM/D,MAAK,SAACC,GAClCA,EAAa+D,aAAahE,MAAK,WAC7BV,OAAOC,SAAS0E,eAKpBvE,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFVyD,CAAwBvE,EAAOC,GAI/BC,UAAUC,cAAciE,MAAM/D,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OE/B/BuE,I","file":"static/js/main.ac8fae48.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useEffect, useState } from 'react'\nimport './Marvel.css';\n\nfunction Marvel() {\n    const [info, setInfo] = useState([]);\n    const [online, setOnline] = useState();\n\n    useEffect(() => {\n\n        //console.log(navigator.onLine);\n        if(!navigator.onLine){\n            if(localStorage.getItem(\"info\")===null){\n                setOnline(false);\n                console.log(\"Loading...\");\n            } else {\n                const storedData = JSON.parse(localStorage.getItem(\"info\"));\n                setInfo(storedData);\n                setOnline(true);\n            }\n        } \n\n        fetch(\"http://gateway.marvel.com/v1/public/characters?ts=1&apikey=23ff8988cbade81d9f4b9e25069f539a&hash=00de9a8f19b12510a7edb83b4a52d448\")\n        .then(result => result.json())\n        .then((result) => {\n\n            const data = [];\n            for (var i = 0, max = result.data.results.length; i < max; i += 1) {\n                data.push(result.data.results[i]);\n            }\n            setInfo([...data]);\n            setOnline(true);\n            localStorage.setItem(\"info\", JSON.stringify(data));\n            //console.log(localStorage.getItem(\"info\"));\n\n        });\n    }, []);\n\n    if(online===true){\n        return (\n            <div className=\"Marvel\">\n                <h1>Marvel Characters</h1>\n                <div className=\"card-columns characters\">\n                {info.map(i =>{\n                    return (\n                    <div className=\"card\" key={i.id}>\n                            <img className=\"card-img-top\" src={i.thumbnail.path+\"/portrait_small.\"+i.thumbnail.extension} alt=\"Marvel character\" />\n                            <div className=\"card-body\">\n                                <h5 className=\"card-title\">{i.name}</h5>\n                                <p className=\"card-text\">Código: {i.id}</p>\n                            </div>\n                        </div>\n                    )\n                })}\n                </div>\n            </div>\n        )\n    } else{\n        return (\n            <div className=\"Marvel\">\n                <h1>Marvel Characters</h1>\n                <h5>Loading....</h5>\n            </div>\n        )\n    }\n    \n} \n\nexport default Marvel\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport Marvel from './components/Marvel';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Marvel />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}